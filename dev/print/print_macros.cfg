#####################################
#            Print Macros           #
#      Version 2.2.0 2023-1-27      #
#####################################

################################
######### START_PRINT ##########
################################
[gcode_macro START_PRINT]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set print_cfg.starting_print = True %} ; begin print_start process
    # Define positioning system
    G90 ; use absolute coordinates
    M83 ; extruder relative mode
    # Preheat bed surface
    HEAT_SURFACE
    # Preheat/soak chamber
    PREP_CHAMBER
    # Prepare fans
    PREP_FANS
    # Prepare bed suface
    PREP_SURFACE
    {% if printcfg.heat_soak_complete == False %}
        # Pause without parking
        PAUSE_BASE
    {% else %}
        # Wait for chamber preheat to finalize
        FINALIZE_ENVIRO
    {% endif %}

################################
######### HEAT_SURFACE #########
################################
[gcode_macro HEAT_SURFACE]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    # Preheat bed
    {% if printcfg.bed_temp > 0 %}
        {% if printcfg.led_status == True %}
            {printcfg.status_heat} ; LED feedback
        {% endif %}
        {% if printcfg.extruder_pretemp > 0 %}
            M{printcfg.output} Warming extruder ; status feedback
            SET_HEATER_TEMPERATURE HEATER=extruder TARGET={printcfg.extruder_pretemp} ; allow partial nozzle warmup
        {% endif %}
        M{printcfg.output} Preheating bed ; status feedback
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={printcfg.bed_temp}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={printcfg.bed_temp-1} MAXIMUM={printcfg.bed_temp+5}
    {% endif %}

################################
######### PREP_CHAMBER #########
################################
[gcode_macro PREP_CHAMBER]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% if printcfg.chamber_temp != 0 %}
        M{printcfg.output} Preheating chamber ; status feedback
        {% if printcfg.led_status == True %}
            {printcfg.status_heat} ; LED feedback
        {% endif %}
        {% if printcfg.chamber_type == 'temperature_fan' %}
            SET_TEMPERATURE_FAN_TARGET temperature_fan={printcfg.chamber_name} target={printcfg.chamber_temp}
        {% elif printcfg.chamber_type == 'heater_generic' %}
            SET_HEATER_TEMPERATURE HEATER={printcfg.chamber_name} TARGET={printcfg.chamber_temp}
        {% endif %}
        {% if printcfg.heat_soak == True %}
            SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=heat_soak_complete VALUE=False
            HEAT_SOAK
        {% endif %}
    {% endif %}

################################
########### HEAT_SOAK ##########
################################
[gcode_macro HEAT_SOAK]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% if printcfg.led_status == True %}
        {printcfg.status_heat} ; LED feedback
    {% endif %}
    {% if printcfg.time_soak == True %}
        M{printcfg.output} "Soaking {printcfg.chamber_time} minutes" ; status feedback
        # Start timer
        UPDATE_DELAYED_GCODE ID=heat_soak_timer DURATION={printcfg.chamber_time*60}
        SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=heat_soak_complete VALUE=False
    {% endif %}
    {% if printcfg.temp_soak == True %}
        M{printcfg.output} "Soaking until {printcfg.chamber_temp}Â°C" ; status feedback
        _set_chamber TEMP={printcfg.chamber_temp} WAIT=true
        SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=heat_soak_complete VALUE=True
    {% endif %}

################################
######## Heat Soak Timer #######
################################
[delayed_gcode heat_soak_timer]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    M{printcfg.output} "Soaking completed after {printcfg.chamber_time} minutes" ; status feedback
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=heat_soak_complete VALUE=True
    {% if print_cfg.starting_print == True %}
        # Soak complete, resume starting print
        RESUME_BASE
    {% endif %}

################################
###### CHAMBER CONTROL #########
################################
[gcode_macro _set_chamber]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    # Parameters
    {% set TEMP = params.TEMP|default(0)|float %}
    {% set WAIT = params.WAIT|default('false')|lower %}
    {% set SPEED = params.SPEED|default(0)|float %}
    # Determine chamber type
    {% if printcfg.chamber_type == 'generic_fan' %}
        # Set chamber fan speed
        SET_FAN_SPEED FAN={printcfg.chamber_name} SPEED={SPEED}
    {% elif printcfg.chamber_type == 'heater' %}
        # Set chamber temperature
        SET_HEATER_TEMPERATURE HEATER={printcfg.chamber_name} TARGET={TARGET}
        {% if WAIT == 'true' %}
            # Wait for chamber temperature
            TEMPERATURE_WAIT SENSOR={printcfg.chamber_name} MINIMUM={TARGET} MAXIMUM={TARGET+25}
        {% endif %}
    {% elif printcfg.chamber_type == 'temperature_sensor' %}
        {% if WAIT == 'true' %}
            # Wait for chamber temperature
            TEMPERATURE_WAIT SENSOR={printcfg.chamber_name} MINIMUM={TARGET} MAXIMUM={TARGET+25}
        {% endif %}
    {% endif %}

################################
########## PREP_FANS ###########
################################
[gcode_macro PREP_FANS]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    # Set controller fan
    {% if printcfg.controller_fan == True %}
        {printcfg.controller_fan_start}
    {% endif %}
    # Set part-cooling fan (off)
    M107
    # Set nevermore/filter fan
    {% if printcfg.nevermore_speed > 0 %}
        SET_FAN_SPEED FAN={printcfg.nevermore_name} SPEED={printcfg.nevermore_speed}
    {% endif %}

################################
######### PREP_SURFACE #########
################################
[gcode_macro PREP_SURFACE]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    # Homing/undock probe
    {% if printcfg.docking_probe == True %}
        # Collect probe
        M{printcfg.output} Collecting probe ; status feedback
        {% if printcfg.led_status == True %}
            STATUS_HOMING ; LED feedback
        {% endif %}
        {% if printer.toolhead.homed_axes != "xyz" %}
            M{printcfg.output} Homing XY ; status feedback
            G28 Y X ; home XY axis
        {% endif %}
        {printcfg.attach_macro} ; attach probe
        M{printcfg.output} Homing Z ; status feedback
        G28 Z ; home Z axis
    {% else %}
        G28 ; home XYZ axis
    {% endif %}
    # Z-tilt or QGL
    {% if printcfg.z_tilt == True %}
        {% if config.z_tilt is defined %}
            M{printcfg.output} Calibrate Z ; status feedback
            {% if printcfg.led_status == True %}
                STATUS_CALIBRATING_Z ; LED feedback
            {% endif %}
            Z_TILT_ADJUST ; adjust z-tilt
        {% else %}
            M{printcfg.error_output} Z_tilt not configured!
        {% endif %}
    {% elif printcfg.qgl == True %}
        {% if config.quad_gantry_level is defined %}
            M{printcfg.output} Calibrate Z ; status feedback
            {% if printcfg.led_status == True %}
                STATUS_CALIBRATING_Z ; LED feedback
            {% endif %}
            QUAD_GANTRY_LEVEL  ; adjust QGL
        {% else %}
            M{printcfg.error_output} QGL not configured!
        {% endif %}
    {% endif %}
    # Bed mesh
    {% if printcfg.bed_mesh == True %}
        {% if config.bed_mesh is defined %}
            {% if printcfg.load_mesh == True %}
                M{printcfg.output} Mesh print area ; status feedback
                BED_MESH_PROFILE LOAD={printcfg.mesh_profile} ; load mesh profile
            {% else %}
                M{printcfg.output} Mesh print area ; status feedback
                BED_MESH_CALIBRATE ; generate new mesh
            {% endif %}
        {% else %}
            M{printcfg.error_output} Bed_mesh not configured!
        {% endif %}
    {% endif %}
    # Dock probe
    {% if printcfg.docking_probe == True %}
        M{printcfg.output} Docking probe ; status feedback
        {printcfg.dock_macro} ; dock probe
    {% endif %}

################################
####### FINALIZE_ENVIRO ########
################################
[gcode_macro FINALIZE_ENVIRO]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    # Preheat hotend
    PREP_EXTRUDER
    # Status notifications
    {% if printcfg.audio_status == True %}
        {printcfg.start_audio} ; audio feedback
    {% endif %}
    {% set print_cfg.starting_print = False %} ; complete print_start process
    M{printcfg.output} Print Started ; status feedback
    {% if printcfg.led_status == True %}
        STATUS_PRINTING ; LED feedback
    {% endif %}

################################
######## PREP_EXTRUDER #########
################################
[gcode_macro PREP_EXTRUDER]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% if printcfg.auto_filsensor == True %}
        # Turn on Filament Sensor
        ENABLEFILAMENTSENSOR
    {% endif %}
    # Begin heating extruder hotend
    M{printcfg.output} Preheating tool ; status feedback
    {% if printcfg.led_status == True %}
        {printcfg.status_heat} ; LED feedback
    {% endif %}
    M104 S{printcfg.extruder_temp} ; set final nozzle temp
    # Park for preheating
    {% if printcfg.cleaning == True %}
        G1 Z{25 + print_cfg.clean_z} F240
        G1 X{print_cfg.clean_x} Y{print_cfg.clean_y} F3000 ; move to park position
    {% else %}
        G1 Z{printcfg.preheat_z} F240
        G1 X{printcfg.preheat_x} Y{printcfg.preheat_y} F3000 ; move to park position
    {% endif %}
    # Wait for heating to complete
    M109 S{printcfg.extruder_temp} ; wait for nozzle temp to stabilize
    # Nozzle Cleaning
    {% if printcfg.cleaning == True %}
        {% if printcfg.led_status == True %}
            STATUS_CLEANING ; LED feedback
        {% endif %}
        {% if printcfg.audio_status == True %}
            {printcfg.clean_macro} ; audio feedback
        {% endif %}
    {% endif %}
    # Nozzle Purging
    {% if printcfg.purging == True %}
        {% if printcfg.led_status == True %}
            STATUS_CLEANING ; LED feedback
        {% endif %}
        {% if printcfg.audio_status == True %}
            {printcfg.purge_macro} ; purge nozzle
        {% endif %}
    {% endif %}
    # Extruder configuration
    G21 ; set units to millimeters
    G90 ; use absolute coordinates
    M82 ; use absolute distances for extrusion
    G92 E0 ; reset extrusion distance

################################
########## END_PRINT ###########
################################
[gcode_macro END_PRINT]
description: Present the finished print
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% if printcfg.end_print == True %}
        {% if printcfg.led_status == True %}
            STATUS_PART_READY ; LED feedback
        {% endif %}
        STOP_COMPONENTS
        # Acknowledge success!
        M{printcfg.output} Print Complete ; status feedback
        {% if printcfg.audio_status == True %}
            {printcfg.success_audio} ; audio feedback
        {% endif %}
        {% if printcfg.led_status == True %}
            {printcfg.status_ready} ; LED feedback
        {% endif %}
        {% if printcfg.unload_filament == True %}
            {printcfg.m600} ; unload filament
        {% endif %}
        {% if printcfg.power_off == True %}
            {printcfg.off_macro} ; power off printer
        {% endif %}
    {% endif %}

################################
###### STOP_COMPONENTS #########
################################
[gcode_macro STOP_COMPONENTS]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% if printcfg.auto_filsensor == True %}
        # Disable filament sensor
        DISABLEFILAMENTSENSOR
    {% endif %}
    {% if printcfg.controller_fan == True %}
        {printcfg.controller_fan_stop}
    {% endif %}
    {% if printcfg.use_scrubber == True %}
        # Scrub VOCs
        SCRUBBER
    {% endif %}

################################
######## CANCEL_PRINT ##########
################################
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    M{printcfg.output} Print Canceled ; status feedback
    {% if printcfg.led_status == True %}
        STATUS_ERROR ; LED feedback
    {% endif %}
    ## Move head and retract only if not already in the pause state and park set to true
    {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
        {% if printer.toolhead.homed_axes == "xyz" %}
            _TOOLHEAD_PARK_PAUSE_CANCEL
        {% endif %}
    {% endif %}
    {% if printcfg.audio_status == True %}
        {printcfg.error_audio} ; audio feedback
    {% endif %}
    STOP_COMPONENTS
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE

################################
########### PAUSE ##############
################################
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    M{printcfg.output} Print Paused ; status feedback
    {% if printcfg.led_status == True %}
        {printcfg.status_busy} ; LED feedback
    {% endif %}
    SET_IDLER TIME=18000 POWER=1 EXTRUDER=0 BED=1 CHAMBER=1 STEPPERS=1
    PAUSE_BASE
    _TOOLHEAD_PARK_PAUSE_CANCEL

################################
########### RESUME #############
################################
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
    {% set extrude = printcfg.park_extrude %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
        {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
        {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
        #SET_IDLE_TIMEOUT TIMEOUT=600
        M83
        G1 E{extrude} F2100
        {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
    {% else %}
        M{printcfg.output|int} Extruder not hot enough
    {% endif %}  
    M{printcfg.output} Print Resumed ; status feedback
    {% if printcfg.led_status == True %}
        STATUS_PRINTING ; LED feedback
    {% endif %}
    {% if printcfg.audio_status == True %}
        {printcfg.resume_audio} ; audio feedback
    {% endif %}
    SET_IDLER TIME=900 POWER=0
    RESUME_BASE {get_params}

################################
######## ADAPTIVE MESH #########
################################
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set bed_mesh_min = config.bed_mesh.mesh_min %}
    {% set bed_mesh_max = config.bed_mesh.mesh_max %}
    {% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (config.bed_mesh.probe_count[0]-2) %}
    {% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (config.bed_mesh.probe_count[1]-2) %}
    {% set x_min = bed_mesh_min[0] %}
    {% set y_min = bed_mesh_min[1] %}
    {% set x_max = bed_mesh_max[0] %}
    {% set y_max = bed_mesh_max[1] %}
    { action_respond_info("{} points, clamping to mesh [{!r} {!r}]".format(
        all_points | count,
        bed_mesh_min,
        bed_mesh_max,
    )) }
    {% if printcfg.mesh_fuzz_enable == True %}
        {% if all_points %}
            {% set fuzz_range = range(printcfg.mesh_fuzz_min * 100 | int, printcfg.mesh_fuzz_max * 100 | int) %}
            {% set x_min = ( bed_mesh_min[0], ((all_points | map(attribute=0) | min - (fuzz_range | random / 100.0)) | default(bed_mesh_min[0])) ) | max %}
            {% set y_min = ( bed_mesh_min[1], ((all_points | map(attribute=1) | min - (fuzz_range | random / 100.0)) | default(bed_mesh_min[1])) ) | max %}
            {% set x_max = ( bed_mesh_max[0], ((all_points | map(attribute=0) | max + (fuzz_range | random / 100.0)) | default(bed_mesh_max[0])) ) | min %}
            {% set y_max = ( bed_mesh_max[1], ((all_points | map(attribute=1) | max + (fuzz_range | random / 100.0)) | default(bed_mesh_max[1])) ) | min %}
        {% endif %}
    {% else %}
        {% set x_min = [ bed_mesh_min[0], (all_points | map(attribute=0) | min | default(bed_mesh_min[0])) ] | max %}
        {% set y_min = [ bed_mesh_min[1], (all_points | map(attribute=1) | min | default(bed_mesh_min[1])) ] | max %}
        {% set x_max = [ bed_mesh_max[0], (all_points | map(attribute=0) | max | default(bed_mesh_max[0])) ] | min %}
        {% set y_max = [ bed_mesh_max[1], (all_points | map(attribute=1) | max | default(bed_mesh_max[1])) ] | min %}
    {% endif %}
    { action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(
        (x_min, y_min), 
        (x_max, y_max),
    )) }
    {% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | int) + 2 %}
    {% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | int) + 2 %}
    {% if (([points_x, points_y]|max) > 6) %}
        {% set algorithm = "bicubic" %}
        {% set min_points = 4 %}
    {% else %}
        {% set algorithm = "lagrange" %}
        {% set min_points = 3 %}
    {% endif %}
    { action_respond_info( "Algorithm: {}".format(algorithm)) }
    {% set points_x = [points_x, min_points]|max  %}
    {% set points_y = [points_y, min_points]|max  %}
    { action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }
    {% if config.bed_mesh.relative_reference_index is defined %}
        {% set ref_index = (points_x * points_y / 2) | int %}
        { action_respond_info( "Reference index: {}".format(ref_index) ) }  
    {% else %}
        {% set ref_index = -1 %}
    {% endif %}
    {% if printcfg.docking_probe == True %}
        {printcfg.attach_macro}              # Attach/deploy a probe if the probe is stored somewhere outside of the print area
    {% endif %}
    {% if printcfg.led_status == True %}
        {printcfg.status_mesh} ; LED feedback
    {% endif %}
    _BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}
    {% if printcfg.docking_probe == True %}
        {printcfg.dock_macro}              # Detach/stow a probe if the probe is stored somewhere outside of the print area
    {% endif %}

################################
######## ADAPTIVE_PURGE ########
################################
[gcode_macro ADAPTIVE_PURGE]
description: A purge macro that adapts to be near your actual printed objects
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% if printcfg.purge_adaptive == True %}
        {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
        {% set x_origin = (all_points | map(attribute=0) | min | default(printcfg.purge_x + printcfg.purge_dist_x + printcfg.purge_size)) - printcfg.purge_dist_x - printcfg.purge_size %}
        {% set y_origin = (all_points | map(attribute=1) | min | default(printcfg.purge_y + printcfg.purge_dist_y + printcfg.purge_size)) - printcfg.purge_dist_y - printcfg.purge_size %}
        {% set x_origin = ([x_origin, 0] | max) %}
        {% set y_origin = ([y_origin, 0] | max) %}
    {% else %}
        {% set x_origin = printcfg.purge_x | float %}
        {% set y_origin = printcfg.purge_y | float %}
    {% endif %}
    {% set purge_move_speed = 2.31 * printcfg.purge_size * printcfg.purge_flow_rate / (printcfg.purge_amount * 2.405) %}
    {% set prepurge_speed = printcfg.purge_flow_rate / 2.405 %}
    { action_respond_info( "x: " + x_origin|string + " y: " + y_origin|string + " purge_move_speed: " + purge_move_speed|string + " prepurge_speed: " + prepurge_speed|string ) }
    {% if printcfg.led_status == True %}
        {printcfg.status_clean} ; LED feedback
    {% endif %}
    G92 E0
    G0 F{printcfg.travel_speed*60}                                                                                              # Set travel speed
    G90                                                                                                                         # Absolute positioning
    G0 X{x_origin} Y{y_origin+printcfg.purge_size/2}                                                                            # Move to purge position
    G0 Z{printcfg.purge_z_height}                                                                                               # Move to purge Z height
    M83                                                                                                                         # Relative extrusion mode
    G1 E{printcfg.purge_tip_distance} F{prepurge_speed*60}                                                                      # Move tip of filament to nozzle
    G1 X{x_origin+printcfg.purge_size*0.289} Y{y_origin+printcfg.purge_size} E{printcfg.purge_amount/4} F{purge_move_speed*60}  # Purge first line of logo
    G1 E-.5 F2100                                                                                                               # Retract
    G0 Z{printcfg.purge_z_height*2}                                                                                             # Z hop
    G0 X{x_origin+printcfg.purge_size*0.789} Y{y_origin+printcfg.purge_size}                                                    # Move to second purge line origin
    G0 Z{printcfg.purge_z_height}                                                                                               # Move to purge Z height
    G1 E.5 F2100                                                                                                                # Recover
    G1 X{x_origin+printcfg.purge_size*0.211} Y{y_origin} E{printcfg.purge_amount/2} F{purge_move_speed*60}                      # Purge second line of logo
    G1 E-.5 F2100                                                                                                               # Retract
    G0 Z{printcfg.purge_z_height*2}                                                                                             # Z hop
    G0 X{x_origin+printcfg.purge_size*0.711} Y{y_origin}                                                                        # Move to third purge line origin
    G0 Z{printcfg.purge_z_height}                                                                                               # Move to purge Z height
    G1 E.5 F2100                                                                                                                # Recover
    G1 X{x_origin+printcfg.purge_size} Y{y_origin+printcfg.purge_size/2}  E{printcfg.purge_amount/4} F{purge_move_speed*60}     # Purge third line of logo
    G1 E-.5 F2100                                                                                                               # Retract
    G92 E0                                                                                                                      # Reset extruder distance
    G0 Z{printcfg.purge_z_height*2}                                                                                             # Z hop

################################
######### CLEAN_NOZZLE #########
################################
[gcode_macro CLEAN_NOZZLE]
variable_pre_hot: True
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    HOME_IF_NEEDED
    {% set nozzle_targ = params.TARGET|default(0)|float %}
    {% set is_hot = params.HOT|default(pre_hot) %}
    {% if is_hot == False %}
        {% if printcfg.led_status == True %}
            {printcfg.status_heat}
        {% endif %}
        M{printcfg.output} Heating extruder..
        {% if nozzle_targ > 0 %}
            M109 S{nozzle_targ}
        {% elif printcfg.clean_temp > 0 %}
            M109 S{printcfg.clean_temp}
        {% endif %}
    {% endif %}
    G90                                            ; absolute positioning
    ## Move nozzle to start position
    G1 X{printcfg.clean_x} Y{printcfg.clean_y} F6000
    G1 Z{printcfg.clean_z} F1500
    # Set lighting
    {% if printcfg.led_status == True %}
        {printcfg.status_clean} ; LED feedback
    {% endif %}
    ## Wipe nozzle
    M{printcfg.output} Wiping nozzle..
    {% for wipes in range(1, (printcfg.clean_wipe_qty + 1)) %}
    G1 X{printcfg.clean_x + printcfg.clean_wipe_dist} F{printcfg.clean_wipe_speed * 60}
    G1 X{printcfg.clean_x} F{printcfg.clean_wipe_speed * 60}
    {% endfor %}
    ## Raise nozzle
    G1 Z{printcfg.clean_raise_dist}
    {% if is_hot == False %}
        M{printcfg.output} Cooling extruder..
        M104 S0
    {% endif %}

################################
########## SCRUBBER ############
################################
[gcode_macro SCRUBBER]
description: Run the Nevermore for a set time
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    M{printcfg.output} Scrubbing VOCs ; status feedback
    {% if printcfg.led_status == True %}
        STATUS_CLEANING ; LED feedback
    {% endif %}
    # Turn on Nevermore to scrub
    SET_FAN_SPEED FAN={printcfg.nevermore_name} SPEED={printcfg.scrub_speed}
    # Set shut-off timer
    UPDATE_DELAYED_GCODE ID=scrub_timer DURATION={printcfg.scrub_time}
[delayed_gcode scrub_timer]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    # Turn off Nevermore
    SET_FAN_SPEED FAN={printcfg.nevermore_name} SPEED=0
    M{printcfg.output} Scrubbing complete ; status feedback
    {% if printcfg.led_status == True %}
        {printcfg.status_ready} ; LED feedback
    {% endif %}

################################
###### FILTER TRACKING #########
################################
[gcode_macro RESET_AIR_FILTER]
description: Resets the air-filter replacement timer
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    SET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0
    SAVE_VARIABLE VARIABLE=air_filter_time VALUE=0
    { action_respond_info("Air filter timer has been reset.") }
[gcode_macro QUERY_AIR_FILTER]
description: Displays the amount of time the air filter has run since it was last reset.
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set hours = "%.2f"|format(print_cfg.filter_time|int / 3600) %}
    { action_respond_info("Air Filter Hours: " + hours) }
[delayed_gcode _AIR_FILTER_TIMER]
initial_duration: 1
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set cached_time = print_cfg.filter_time|int %}
        {% if cached_time == -1 %}
            {% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}
            SET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }
        {% endif %}
    {% if printer[print_cfg.nevermore_type print_cfg.nevermore_name].speed|float > 0 %}
        SET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}
    {% endif %}
    {% set replacement_seconds = print_cfg.hours_until_replacement|float * 3600 %}
    {% if cached_time > replacement_seconds %}
    { print_cfg.filter_replacement }
    {% endif %}
    UPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1
[delayed_gcode _AIR_FILTER_FLUSH_TIMER]
initial_duration: 300
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}
    {% set actual_time = print_cfg.filter_time|float %}
    {% if saved_time != actual_time %}
        SAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}
    {% endif %}
    UPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300

################################
############ IDLER #############
################################
[gcode_macro _IDLER]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set POWER = printcfg.idle_power %}
    {% set BED = printcfg.idle_bed %}
    {% set EXTRUDER = printcfg.idle_extruder %}
    {% set CHAMBER = printcfg.idle_chamber %}
    {% set STEPPERS = printcfg.idle_chamber %}
    {% if POWER == False %}
        # Disable steppers
        M84
        # Disable all heaters
        TURN_OFF_HEATERS
        # Run macro to turn off relay or smart switch
        {printcfg.off_macro} ; power off
    {% endif %}
    {% if STEPPERS == False %}
        # Disable steppers
        M84
    {% endif %}
    {% if BED == False %}
        # Disable bed heater
        SET_HEATER_TEMPERATURE HEATER=heater_bed
    {% endif %}
    {% if EXTRUDER == False %}
        # Disable extruder
        SET_HEATER_TEMPERATURE HEATER=extruder
    {% endif %}
    {% if CHAMBER == False %}
        # disable chamber components
        _set_chamber TARGET=0 SPEED=0
    {% endif %}

###############################
####### CHANGE_FILAMENT ########
################################
[gcode_macro CHANGE_FILAMENT]
description: Change the filament in toolhead
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    HOME_IF_NEEDED
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=cold_start VALUE=True
    M{printcfg.output|int} Filament Change
    M600
    UNLOAD_FILAMENT
    {% if printcfg.auto_filament_sensor == True %}
        ENABLEFILAMENTSENSOR
    {% endif %}

################################_printcfg
####### FILAMENT_RUNOUT ########
################################
[gcode_macro FILAMENT_RUNOUT]
description: Procedure when Filament Runout Sensor is triggered
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% if printcfg.cold_start == False %}
        M{printcfg.output|int} Filament Runout
        {% if printcfg.use_telegram == True %}
            {printcfg.telegram_runout}
        {% endif %}
        SET_IDLE_TIMEOUT TIMEOUT=3600
        {% if printcfg.audio_status == True %}
            {printcfg.m600_audio}
            ALERT_BEEP_ON
        {% endif %}
        M600
        SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=prev_temp VALUE={printer.extruder.target}
        SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=runout VALUE=True
        {% if printcfg.auto_unload == True %}
            M{printcfg.output|int} Unloading Filament...
            UNLOAD_FILAMENT
        {% else %}
            {% if printcfg.use_fluidd == True %}
                {% if printcfg.cold_start == False %}
                    M118 Run UNLOAD_FILAMENT to unload.
                    {% if printcfg.audio_status == True and printcfg.audio_frequency > 0 %}
                        M118 Run ALERT_BEEP_OFF to silence beeper
                    {% endif %}
                {% endif %}
            {% endif %}
            M109 S0
        {% endif %}
    {% endif %}

################################
############ M600 ##############
################################
[gcode_macro M600]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    SET_IDLE_TIMEOUT TIMEOUT=7200 ; Increase idle timeout
    {% if printer.idle_timeout.state == "Printing" %}
        PAUSE ; Pause printing
    {% endif %}
    {% if printcfg.led_status == True %}
        {printcfg.status_m600}
    {% endif %}
    _FILAMENT_PARK
    {% if printcfg.audio_status == True %}
        ALERT_BEEP_ON
    {% endif %}
    # Check if this is slicer-initiated
    {% if printcfg.cold_start == False and printcfg.runout == False %}
        M{printcfg.output|int} Filament Change
        SET_IDLE_TIMEOUT TIMEOUT=3600
        {% if printcfg.auto_unload == True %}
            M{printcfg.output|int} Unloading Filament...
            UNLOAD_FILAMENT
        {% else %}
            M109 S0
            {% if printcfg.use_fluidd == True %}
                {% if printcfg.cold_start == False %}
                    M118 Run UNLOAD_FILAMENT to unload.
                    {% if printcfg.audio_status == True and printcfg.audio_frequency > 0 %}
                        M118 Run ALERT_BEEP_OFF to silence beeper
                    {% endif %}
                {% endif %}
            {% endif %}
        {% endif %}
    {% endif %}
    # Reset check variable
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=runout VALUE=False

################################
####### UNLOAD_FILAMENT ########
################################
[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    {% set LENGTH = params.LENGTH|default(printcfg.m600_unload_length)|float %} ; Unload length
    {% set TARGET = params.TARGET|default(printcfg.m600_default_temp)|float %} ; Unload temperature
    ##################
    {% if printcfg.audio_status == True %}
        ALERT_BEEP_OFF
    {% endif %}
    {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
    {% set cur_targ = printer.extruder.target|int %}        ; Current target
    {% if config.extruder.min_extrude_temp is defined %}
        {% set min_extrude = config.extruder.min_extrude_temp|int %}
    {% else %}
        {% set min_extrude = 180 %}
    {% endif %}
    {% if printcfg.prev_temp != 0 %}
        {% set TARGET = printcfg.prev_temp %}
    {% elif params.TARGET is defined and params.TARGET|int > min_extrude %} ; If current temp is below target
        {% set TARGET = params.TARGET|int|default(printcfg.m600_default_temp) %}
    {% endif %}
    {% if cur_temp < (TARGET-5) %}
        {% if printcfg.led_status == True %}
            {printcfg.status_heat}
        {% endif %}
        M{printcfg.output|int} Heating nozzle...
        M109 S{TARGET} ; Heat nozzle to target temperature
    {% endif %}
    {% if printcfg.led_status == True %}
        {printcfg.status_unload}
    {% endif %}
    G91 ; Relative positioning
    # Pre-unload to loosen filament
    G1 E5.0 F1200 ; Extrude a bit 
    G1 E3.0 F1600 ; Extrude a bit
    G1 E-6.67 F7000 ; pull hard
    G1 E5.0 F2000 ; Extrude a bit harder
    G1 E-6.67 F3500 ; pull less hard
    # Unload
    G1 E-{LENGTH} F{printcfg.m600_fast_speed|int}
    G90 ; Absolute postitioning
    M400
    {% if printcfg.auto_filament_sensor == True %}
        ENABLEFILAMENTSENSOR
    {% endif %}
    M{printcfg.output|int} Unload Complete
    {% if printcfg.led_status == True %}
        {printcfg.status_busy}
    {% endif %}
    {% if printcfg.use_fluidd == True %}
        {% if printcfg.auto_load == False %}
            M118 Run LOAD_FILAMENT to load.
        {% endif %}
    {% endif %}

################################
####### INSERT_FILAMENT ########
################################
[gcode_macro _INSERT_FILAMENT]
gcode:
    {% set printcfg = printer["gcode_macro _printcfg"] %}
    M{printcfg.output|int} Filament Detected!
    {% if printcfg.auto_load == True %}
        LOAD_FILAMENT
    {% endif %}


################################
######## LOAD_FILAMENT #########
################################
[gcode_macro LOAD_FILAMENT]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    {% set SLOW = params.SLOW|default(printcfg.m600_load_slow)|float %} ; Purge amount
    {% set FAST = params.FAST|default(printcfg.m600_load_fast)|float %} ; Load length
    ##################
    {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
    {% set cur_targ = printer.extruder.target|int %}        ; Current target
    {% if config.extruder.min_extrude_temp is defined %}
        {% set min_extrude = config.extruder.min_extrude_temp|int %}
    {% else %}
        {% set min_extrude = 180 %}
    {% endif %}
    {% if printcfg.prev_temp != 0 %}
        {% set TARGET = printcfg.prev_temp %}
    {% elif params.TARGET is defined and params.TARGET|int > min_extrude %} ; If current temp is below target
        {% set TARGET = params.TARGET|int|default(220) %}
    {% else %}
        {% set TARGET = 220 %}
    {% endif %}
    {% if printer.extruder.target < min_extrude %} ; Verify extruder is hot enough
        {% set TARGET = printcfg.m600_default_temp %} ; Heat up to default temp
    {% else %}
        {% set TARGET = printer.extruder.target %}
    {% endif %}
    {% if cur_temp < (TARGET-5) %}
        {% if printcfg.led_status == True %}
            {printcfg.status_heat}
        {% endif %}
        M{printcfg.output|int} Heating nozzle...
        M109 S{TARGET} ; Heat nozzle to target temperature
    {% endif %}
    {% if printcfg.led_status == True %}
        {printcfg.status_load}
    {% endif %}
    M{printcfg.output|int}  LOADING...
    G91 ; Relative positioning
    G1 E25.0 F{printcfg.m600_med_speed|int} ; pre-load
    G1 E{FAST} F{printcfg.m600_fast_speed|int} ; load up to hotend
    G4 P900 ; wait a moment
    G1 E{SLOW} F{printcfg.m600_slow_speed|int} ; purge to change filament
    G90 ; Absolute postitioning
    M400
    {% if printcfg.coldstart == True %}
        M{printcfg.output|int} Cooling nozzle...
        M109 S0
        {% if printcfg.auto_sensor == True %}
            DISABLEFILAMENTSENSOR
        {% endif %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=prev_temp VALUE=0
    SET_IDLE_TIMEOUT TIMEOUT=900 ; Return idle timeout to normal
    {% if printcfg.audio_status == True %}
        CHANGE_TUNE
    {% endif %}
    M{printcfg.output|int} Load Complete
    {% if printcfg.led_status == True %}
        STATUS_READY
    {% endif %}
    {% if printcfg.clean_nozzle == True %}
        M{printcfg.output|int} Cleaning nozzle..
        {printcfg.clean_macro}
    {% endif %}
    {% if printcfg.coldstart == False %}
        {% if printcfg.use_fluidd == True %}
            {% if printcfg.cold_start == False %}
                M118 You may now RESUME the print.
            {% endif %}
        {% endif %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=coldstart VALUE=False

################################
############ PURGE #############
################################
[gcode_macro PURGE]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    {% set LENGTH = params.LENGTH|default(printcfg.m600_purge_length)|float %} ; Purge length
    ##################
    {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
    {% set cur_targ = printer.extruder.target|int %}        ; Current target
    {% if printcfg.prev_temp != 0 %}
        {% set TARGET = printcfg.prev_temp %}
    {% elif params.TARGET is defined  %} ; If current temp is below target
        {% set TARGET = params.TARGET|int %}
    {% endif %}
    {% if printer.extruder.target < config.extruder.min_extrude_temp|int %} ; Verify extruder is hot enough
        {% set TARGET = printcfg.m600_default_temp %} ; Heat up to default temp
    {% endif %}
    {% if printcfg.led_status == True %}
        {printcfg.status_heat}
    {% endif %}
    M{printcfg.output|int} Heating nozzle...
    M109 S{TARGET} ; Heat nozzle to target temperature
    {% if printcfg.led_status == True %}
        {printcfg.status_load}
    {% endif %}
    M{printcfg.output|int} PURGING..
    G91 ; Relative positioning
    G1 E{LENGTH} F{printcfg.m600_slow_speed|int} ; Purge filament
    G90 ; Absolute postitioning
    M400
    M109 S{cur_targ} ; Return target temp to previous value
    M{printcfg.output|int} Purge Complete
    {% if printcfg.led_status == True %}
        {printcfg.status_ready}
    {% endif %}

################################
########### PARKING ############
################################
# Used to park the toolhead for filament changes
[gcode_macro _FILAMENT_PARK]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
	M{printcfg.output|int} Parking toolhead...
	SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=prev_temp VALUE={printer.extruder.target}
    G91
	{% if printer.toolhead.position.z|float + printcfg.park_z|float < config["stepper_z"]["position_max"]|float %}
		{% if  printer.toolhead.position.z < printcfg.park_zmin|int %}
            G1 Z{printcfg.park_zmin|int-printer.toolhead.position.z|int}
		{% else %}
            SAVE_GCODE_STATE NAME=save_state
            G1 Z{printcfg.park_z|int}
            RESTORE_GCODE_STATE NAME=save_state
        {% endif %}
	{% endif%}
	G90
	G1 X{printcfg.park_x|int} Y{printcfg.park_y|int} F{printcfg.park_speed|int}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printcfg.park_x|int %}
    {% set y_park = printcfg.park_y|int %}
    {% set z_park_delta = 2.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - z_park_delta) %}
        {% set z_safe = z_park_delta %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
        M83
        G1 E-{printcfg.park_extrude} F2100
        {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
    {% else %}
        M{printcfg.output|int} Extruder not hot enough
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
        G91
        {% if printer.toolhead.position.z|float + printcfg.park_z|float < config["stepper_z"]["position_max"]|float %}
            {% if  printer.toolhead.position.z < printcfg.park_zmin|int %}
                G1 Z{printcfg.park_zmin|int-printer.toolhead.position.z|int}
            {% else %}
                SAVE_GCODE_STATE NAME=save_state
                G1 Z{printcfg.park_z|int}
                RESTORE_GCODE_STATE NAME=save_state
            {% endif %}
        {% endif%}
        G90
        G1 X{printcfg.park_x|int} Y{printcfg.park_y|int} F{printcfg.park_speed|int}
        {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
    {% else %}
        M{printcfg.output|int} Printer not homed
    {% endif %}

################################
########### HOMING #############
################################
# Only home if not homed
[gcode_macro HOME_IF_NEEDED]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% if printer.toolhead.homed_axes != "xyz" %}
        M{printcfg.output|int} Homing axis
        G28
    {% endif %}

################################
######## AUDIO ALERTS###########
################################
# Audio alert macros
[delayed_gcode alert_beeper]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {printcfg.m600_audio} ; Play alert tone
    UPDATE_DELAYED_GCODE ID=alert_beeper DURATION={printcfg.alert_freq|int}
# Start the alert beep cycle
[gcode_macro ALERT_BEEP_ON]
gcode:
    UPDATE_DELAYED_GCODE ID=alert_beeper DURATION=1
# Stop the alert beep cycle
[gcode_macro ALERT_BEEP_OFF]
gcode:
    UPDATE_DELAYED_GCODE ID=alert_beeper DURATION=0

################################
#### FILAMENT SENSOR CONTROL####
################################
# Disable filament sensor at startup
[delayed_gcode AUTO_DISABLEFILAMENTSENSOR]
initial_duration: 1
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %}
    {% if printcfg.auto_filament_sensor == True %} ; If automated sensor feature is enabled
        SET_FILAMENT_SENSOR SENSOR={printcfg.filament_sensor} ENABLE=0 ; Disable sensor
    {% endif %}
# Enable filament sensor
[gcode_macro ENABLEFILAMENTSENSOR]
description: Activates filament sensor   
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %}
    {% set SENSOR = params.SENSOR|default(printcfg.filament_sensor) %} ; get sensor
    M{printcfg.output|int} Enabling filament sensor
    SET_FILAMENT_SENSOR SENSOR={SENSOR} ENABLE=1
# Disable filament sensor
[gcode_macro DISABLEFILAMENTSENSOR]
description: Deactivates filament sensor
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %}
    {% set SENSOR = params.SENSOR|default(printcfg.filament_sensor) %} ; get sensor
    M{printcfg.output|int} Disabling filament sensor
    SET_FILAMENT_SENSOR SENSOR={SENSOR} ENABLE=0

################################
########### Aliases ############
################################
[gcode_macro PREP_PRINT]
gcode:
    START_PRINT { rawparams }

[gcode_macro PRINT_START]
gcode:
    START_PRINT { rawparams }

[gcode_macro PRINT_END]
gcode:
    END_PRINT { rawparams }

[gcode_macro PRESENT_PRINT]
gcode:
    END_PRINT { rawparams }

[gcode_macro LAZY_HOME]
gcode:
    HOME_IF_NEEDED { rawparams }

[gcode_macro HOME_CHECK]
gcode:
    HOME_IF_NEEDED { rawparams }

[gcode_macro CHECK_HOME]
gcode:
    HOME_IF_NEEDED { rawparams }
